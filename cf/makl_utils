#
# $Id: makl_utils,v 1.15 2005/09/28 16:18:01 stewy Exp $
#

##\brief Set the package name to $1.
##
##  \param $1 package name
##  
makl_pkg_name ()
{
    [ $1 ] || makl_err 1 "makl_pkg_name(): undefined package name!"

    makl_set "__package__" "$1"
}

##\brief Set the package version to $1 
##  [format: "X.Y.Z", where X, Y and Z are digits]
## If no argument is supplied, a file named VERSION in the base 
## directory containing the version is expected. 
## The package name must already be defined by makl_pkg_name().
##
##  \param $1 package version (optional)
##  
makl_pkg_version ()
{
    file="VERSION"
    pkg=`makl_get "__package__"`

    [ -z ${pkg} ] && \
        makl_err 1 "makl_pkg_version(): makl_pkg_name must be defined first!"

    [ -f ${file} ] && [ -r ${file} ] && \
        ver=`cat ${file} | sed 's/[\ 	]*$//'`	#remove trailing whitespace

    [ $? = 0 ] || ver=$1

    echo ${ver} | grep '^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$'
    [ $? = 0 ] || makl_err 2 "makl_pkg_version(): version must have format 'X.Y.Z'" \
						     "where X, Y and Z are digits."

    makl_set_var_h "`makl_upper ${pkg}`_VERSION" ${ver} 1
}

##\brief Print the supplied error string to stderr and bail out with the given 
##   exit code.
## 
##   \param $1 exit code
##   \param $2 error string
##
makl_err ()
{
    exit_code=$1
    shift

    echo 1>&2 "$0: [err]: $*"
    makl_cleanup_rundir
    exit ${exit_code}
}

##\brief Print the supplied debug message to stderr if "makl_debug" variable is set
##   to "true", "yes", "on" or '1'.
##
##   \param $1 debug string
##
makl_dbg ()
{
    case ${makl_debug} in
        [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1)
            echo 1>&2 "$0: [dbg]: $*"
            ;;
    esac
}

##\brief Print the supplied warning message to stderr.
##  
##   \param $1 warning string
##
makl_warn ()
{
    echo 1>&2 "$0: [wrn]: $*"
}

##\brief Print MaKL global variables in use to stderr if 'makl_debug' is set.
##
makl_dbg_globals ()
{
    makl_dbg "MAKL_DIR: ${MAKL_DIR}"
    makl_dbg "makl_run_dir: ${makl_run_dir}"
    makl_dbg "makl_conf_h: ${makl_conf_h}"
    makl_dbg "makl_makefile_conf: ${makl_makefile_conf}"
}

##\brief Transform lower into upper case letters.
##
##   \param $* list of 0 or more strings to be converted
##
makl_upper ()
{
   echo $* | tr "[a-z]" "[A-Z]"
}

##\brief Remove ${makl_run_dir}
##
makl_cleanup_rundir ()
{
    [ -z `makl_get "__noclean__"` ] || return 
    rm -rf ${makl_run_dir}
}

##\brief Present 'question' at terminal and wait the user to answer.
##
##   \param $1 - question string
##   \return '0' if [yY] was typed, '1' if [nN].
##
makl_yesno ()
{
    echo -n "$1 " 
    
    while [ /bin/true ]; do 
        read answer
        case ${answer} in
            [Yy])
                return 0
                ;;
            [nN])
                return 1
                ;;
            *)
                echo -n "please say [yY] or [nN]: "
                ;;
        esac
    done
}

##\brief Whether $1 is a valid mode (3 octal digits).
##
##  \param $1 - mode string
##  \return 0 if valid, 1 otherwise
##
makl_is_mode ()
{
    echo $1 | grep '^[0-7][0-7][0-7]$'

    return $?
}
