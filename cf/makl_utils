#
# $Id: makl_utils,v 1.7 2005/08/01 08:56:10 stewy Exp $
#

# makl_err exit_code err_string
#
#   Print the supplied error string to stderr and bail out with the given 
#   exit code.
#   $1 - exit code
#   $2 - error string
#   No return value.
#
makl_err ()
{
    local exit_code=$1
    shift

    echo 1>&2 "$0: [err]: $*"
    exit ${exit_code}
}

# makl_dbg dbg_string
#
#   Print the supplied debug message to stderr if "makl_debug" variable is set
#   to "true", "yes", "on" or '1'.
#   $1 - debug string
#   No return value.
#
makl_dbg ()
{
    case ${makl_debug} in
        [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1)
            echo 1>&2 "$0: [dbg]: $*"
            ;;
    esac
}

# makl_warn warning_string
#
#   Print the supplied warning message to stderr.
#   $1 - warning string
#
makl_warn ()
{
    echo 1>&2 "$0: [wrn]: $*"
}

# makl_dbg_globals
#
#   Print MaKL global variables in use to stderr if 'makl_debug' is set.
#
makl_dbg_globals ()
{
    makl_dbg "MAKL_DIR: ${MAKL_DIR}"
    makl_dbg "makl_run_dir: ${makl_run_dir}"
    makl_dbg "makl_conf_h: ${makl_conf_h}"
    makl_dbg "makl_makefile_conf: ${makl_makefile_conf}"
}

# makl_upper string1 ... stringn
#
#   Transform lower into upper case letters.
#   $* - list of 0 or more strings to be converted
#   No return value.
#
makl_upper ()
{
   echo $* | tr "[a-z]" "[A-Z]"
}

# makl_cleanup_rundir
#
#   Remove ${makl_run_dir}
#   No return value.
#
makl_cleanup_rundir ()
{
    makl_yesno "do you want to remove ${makl_run_dir} ?" || return
    rm -rf ${makl_run_dir}
}

# makl_yesno question
#
#   Present 'question' at terminal and wait the user to answer.
#   $1 - question string
#   Return '0' if [yY] was typed, '1' if [nN].
makl_yesno ()
{
    echo -n "$1 " 
    
    while [ /bin/true ]; do 
        read answer
        case ${answer} in
            [Yy])
                return 0
                ;;
            [nN])
                return 1
                ;;
            *)
                echo -n "please say [yY] or [nN]: "
                ;;
        esac
    done
}


# makl_find str file
#   
#   Check whether str exists in file
#   $1 - string to be searched
#   $2 - file name
#   Return '0' if found, '1' otherwise
#
makl_find ()
{
    if [ ! -e $2 ]; then
        return 1
    fi

    # interpret $1 as fixed string (no special chars)
    grep -F  "$1" "$2" &> /dev/null
    if [ $? = 0 ]; then
        return 0
    else
        return 1
    fi
}


# makl_init_makefile_conf
#
#   Initialise ${makl_makefile_conf}
#   No return value.
#
makl_init_makefile_conf ()
{
    echo "# Autogenerated by MaKL - `date`" > ${makl_makefile_conf}
    echo >> ${makl_makefile_conf}
}

# makl_term_conf_h
#
#   Wrap ${makl_conf_h} 
#   No return value.
#
makl_term_conf_h ()
{
    echo >> ${makl_conf_h}
    echo '#endif /* !_CONF_H_ */' >> ${makl_conf_h}
}

# makl_init_conf_h
#
#   Initialise ${makl_conf_h}
#   No return value.
#
makl_init_conf_h ()
{
    echo "/* Autogenerated by MaKL - `date` */" > ${makl_conf_h}
    echo >> ${makl_conf_h} 
    echo "#ifndef _CONF_H_" >> ${makl_conf_h}
    echo "#define _CONF_H_" >> ${makl_conf_h}
    echo >> ${makl_conf_h}
}
