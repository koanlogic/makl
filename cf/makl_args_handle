#
# $Id: makl_args_handle,v 1.8 2005/08/05 13:47:49 stewy Exp $
#


# _makl_help
_makl_help () 
{
    echo 
    echo "'MaKL' - a painless C project configuration tool"
    echo 
    echo "Usage: ./CONFIGURE_SCRIPT [OPTION] ..."
    echo 
    echo "OPTION can be defined as follows:"
    echo 
    _makl_help_opts
    echo
    echo "Legend:"       
    echo "  <*>: required dependency" 
    echo "  <?>: optional dependency" 
    echo "  < >: unset variable" 
    echo "  <x>: set variable" 
    echo
}

# _makl_help_opts
_makl_help_opts() 
{
    local file_args=${makl_run_dir}/args 
    
    # print out arguments
    [ -e ${file_args} ] && \
    cat ${file_args} | {
        while read line; do 
            local id=`makl_tab_elem "${line}" 1`
            pms=`makl_tab_elem "${line}" 2`
            dsc=`makl_tab_elem "${line}" 3`
            [ -e ${makl_run_dir}/args_"${id}" ] && \
            cat ${makl_run_dir}/args_"${id}" | { 
                while read lin; do
                    ID=`makl_tab_elem "${lin}" 1`
                    dft=`makl_tab_elem "${lin}" 2`
                    pfx=`makl_tab_elem "${lin}" 3`
                    DSC=`makl_tab_elem "${lin}" 4`
                    makl_args_print ${id} ${pms} "${dsc}" ${ID} "${DSC}" ${pfx} "${dft}"
                done
            } || \
            echo "--"${id}${pms} $'\t' $'\t' ${dsc}
        done
    }
}

# _makl_prefix
#
#   $2 <must be empty>
_makl_prefix ()
{
    shift -1 &>/dev/null
    [ ! $2 ] || makl_err 1 "makl_prefix: too many parameters!"
    
    makl_set_var_mk "DESTDIR" $1
}

# _makl_dir
_makl_dir ()
{
    [ ! -z $1 ] || _makl_args_err "_makl_dir: Missing variable type!"
    [ ! -z $2 ] || _makl_args_err "_makl_dir: Missing target directory!"
      
    local f_dirs=${makl_run_dir}/args_dir
    makl_tab_find ${f_dirs} $1
    
    [ $? = 0 ] || makl_err 2 "_makl_dir: Bad directory type: $1"
    
    makl_set_var_mk `makl_upper $1`"DIR" $2
}

# _makl_print 
_makl_print ()
{
    [ ! -z $1 ] || _makl_args_err "_makl_print: Missing variable type!"

    local f_vars=${makl_run_dir}/vars
    local f_var=${makl_run_dir}/vars_$1

    [ -e ${f_var} ] || makl_err 2 "_makl_print: Invalid variable type: $1"
    local dsc=`makl_tab_get ${f_vars} $1 2`
    makl_dbg "printing variables of type: $1 ("${dsc}")" 

    cat ${f_var} | { 
        while read lin; do
            local var=`makl_tab_elem "${lin}" 1`
            local set=`makl_tab_elem "${lin}" 2`
            local val=\"`makl_tab_elem "${lin}" 3`\"
            if [ ${set} = 0 ]; then
                echo -n $'\t'"< > "
                echo "${var}"
            else
                echo -n $'\t'"<x> "
                echo "${var} = ${val}"
            fi
        done
    }
}


# makl_feature_c wrapper
#
# $1 feature id
# $2 file to be compiled
_makl_feat_c ()
{
    file=`  echo $2 | cut -f1 -d":"`
    flags=` echo $2 | cut -s -f2 -d":"`

    makl_feature_c $1 ${file} "${flags}" 1>/dev/null
    [ $? = 0 ] || makl_err 2 "makl_feat_c: feature $1 - failed to compile $2" 
}

# makl_feature_x wrapper
# 
# $1 feature id 
# $2 file to be executed
_makl_feat_x ()
{
    makl_feature_x $1 $2 1>/dev/null
    [ $? = 0 ] || makl_err 2 "makl_feat_x: feature $1 - failed to execute $2"
}

# makl_libdep wrapper
#
# $1 library id
# $2 value="<base_dir>:[<tst_file>]"
_makl_lib ()
{
    [ $1 ] || makl_err 1 "makl_lib: missing package name!"
    [ $2 ] || makl_err 1 "makl_lib: requires value argument!"

    id=$1
    base=`echo $2 | cut -f1 -d":"`
    tst=`echo $2 | cut -s -f2 -d":"`
    
    if [ ${tst} ]; then
        [ -r ${tst} ] || makl_err 2 "makl_lib: unreadable test file (${tst})!" 
    else
        # try default test file
        tst=`pwd`/build/lib$1.c
        [ -r ${tst} ] || makl_err 2 "makl_lib: no test file for $1 (${tst})!" 
    fi

    makl_libdep ${id} ${base} ${tst}

    # add to list of found libs
    if [ $? = 0 ]; then
       makl_req_found "lib" ${id}
    fi

    return $?
}

# Print error message followed by usage
#
# $1 message
_makl_args_err ()
{
    _makl_help 
    echo
    makl_err 1 $1
}

# Handle an argument
#
#   $1 - argument to handle
_makl_arg_handle ()
{
    cmd=`echo $1 | cut -f3 -d"-" | cut -f1 -d"="`
    id=`echo $1 | cut -s -f4 -d"-" | cut -f1 -d"="`
    val=`echo $1 | cut -s -f2 -d"="`

    _makl_${cmd} ${id} "${val}"
    [ $? = 0 ] || _makl_args_err "Undefined command: '${cmd}'!"
}

# makl_args_handle
# 
#   "$@" - command line arguments 
makl_args_handle()
{
    for arg in "$@"; do
        pref=`echo ${arg} | cut -c1,2`
        cmd=`echo ${arg} | cut -f3 -d"-" | cut -f1 -d"="`
        if [ ${arg} = "-h" ]; then
            _makl_help
            exit 1
        else 
            [ ${pref} = "--" ] || _makl_args_err "Undefined command: ${arg}!"
            if [ ${cmd} = "help" ]; then
                _makl_help
                exit 1 
            else
                _makl_arg_handle "${arg}"
            fi
        fi
    done

    _makl_require_check "lib"
}
