#
# $Id: makl_args_handle,v 1.19 2005/10/06 08:34:46 stewy Exp $
#

##\brief Initialise command line arguments. 
##
##  Initialise command-line arguments \e $@ . This should be the first call in the 
##  configure script after global initialisation (\e makl_init).
##
##  \param $@ command line arguments
##
makl_args_init ()
{
    makl_dbg "preprocessing command-line arguments"

    for arg in "$@"; do
        case ${arg} in 
            -h | --help)
                makl_set "__noconfig__"
                ;;
            -V | --version)
                __makl_version
                exit 1
                ;;
            -v | --verbose)
                __makl_verbose
                ;;
        esac
    done
}

##\brief Process the configure command-line arguments. 
##
##  Process the configure command-line arguments. This should be the last call in
##  the configure script (before \e makl_term()).
##
##   \param $@ command line arguments 
##
makl_args_handle ()
{
    makl_dbg "handling command-line arguments"

    for arg in "$@"; do
        pref=`echo ${arg} | cut -c1,2`
        cmd=`echo ${arg} | cut -f3 -d"-" | cut -f1 -d"="`
        case ${arg} in 
            -h | --help)
                __makl_help
                exit 1
                ;;
            -v | --verbose)
                ;;
            *)
                [ ${pref} = "--" ] || _makl_args_err "Undefined command: ${arg}!"
                _makl_arg_handle "${arg}"
                ;;
        esac
    done

    [ -z `makl_get "__noconfig__"` ] || return

    makl_dbg "checking dependencies"
    _makl_require_check "lib"
    _makl_require_check "featx"
}

##\brief Handler. Print out the help menu.
##
##  Print out the help menu.
## 
__makl_help () 
{
    echo 
    echo "'MaKL' - a painless C project configuration tool"
    echo 
    echo "Usage: ./CONFIGURE_SCRIPT [OPTION] ..."
    echo 
    echo "OPTION can be defined as follows:"
    echo 
    _makl_help_opts
    echo
    echo "Legend:"       
    echo "  <*>: required dependency" 
    echo "  <?>: optional dependency" 
    echo

    makl_cleanup_rundir
}

##\brief Handler. Activate verbose debugging output.
##
##
__makl_verbose ()
{
    export makl_debug=1
}

##\brief Handler. Print out the version.
##
##
__makl_version ()
{
    file="${MAKL_DIR}/VERSION"

    [ -f ${file} ] && [ -r ${file} ] && \
        ver=`cat ${file} | sed 's/[\ 	]*$//'`	#remove trailing whitespace
   
    echo ${ver} | grep '^[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' 1> /dev/null
    [ $? = 0 ] || makl_err 2 "--version: version must have format 'X.Y.Z'" \
						     "where X, Y and Z are digits."

    echo "MaKL version: ${ver}"

    makl_cleanup_rundir
}

## \brief Print out the help options.
##
##  Print out the help options.
##
_makl_help_opts() 
{
    file_args=${makl_run_dir}/args 

    # print out arguments
    [ -e ${file_args} ] && \
    cat ${file_args} | {
        while read line; do 
            id=`makl_tab_elem "${line}" 1`
            pms=`makl_tab_elem "${line}" 2`
            dft=`makl_tab_elem "${line}" 3`
            dsc=`makl_tab_elem "${line}" 4`
            [ -e ${makl_run_dir}/args_"${id}" ] && \
            cat ${makl_run_dir}/args_"${id}" | { 
                while read lin; do
                    ID=`makl_tab_elem "${lin}" 1`
                    DFT=`makl_tab_elem "${lin}" 2`
                    PFX=`makl_tab_elem "${lin}" 3`
                    DSC=`makl_tab_elem "${lin}" 4`
                    _makl_args_print "${id}" "${pms}" "${dsc}" "${ID}" \
                                    "${DFT}" "${PFX}" "${DSC}"

                done
            } || {
                echo -n "--"${id}${pms} "     "  ${dsc}
                [ "${dft}" = " " ] || echo -n " [${dft}]"
            }
            echo
        done
    }
}

##\brief Handler. Don't clean cache at end of execution.
##
##  Don't clean cache at end of execution.
##
__makl_noclean ()
{
    [ $# -gt 1 ] && _makl_args_err "--noclean: Too many arguments"

    makl_set "__noclean__" 1
}

##\brief Handler. Set the base installation directory.
##
##  Set the base installation directory to \e $1. Such directory will 
##  become the default base directory for all data types.
##
##   \param $1 base installation directory
##
__makl_prefix ()
{
    shift -1 2>/dev/null
    [ ! $2 ] || _makl_args_err "--makl_prefix: too many parameters!"
    
    makl_set_var_mk "DESTDIR" $1
}

##\brief Handler. Set the base directory for a specific data type.
##
##  Set the base directory for a specific data type \e $1. For a list of 
##  valid data types please refer to ./configure --help. \e $2 indicates 
##  the path to the base directory.
##
##   \param $1 directory type
##   \param $2 directory path
##
__makl_dir ()
{
    [ ! -z $1 ] || _makl_args_err "--makl_dir: Missing directory type!"
    [ ! -z $2 ] || _makl_args_err "--makl_dir: Missing target directory!"
      
    f_dirs=${makl_run_dir}/args_dir
    makl_tab_find ${f_dirs} $1
    
    [ $? = 0 ] || makl_err 2 "_makl_dir: Bad directory type: $1"
    
    makl_set_var_mk `makl_upper $1`"DIR" $2
}

##\brief Handler. Set default file owner id.
##
##  Set the default file owner id to \e $1.
##
##  \param $1 owner id
##  
__makl_defown ()
{
    shift -1 2>/dev/null
    [ ! $2 ] || _makl_args_err "--makl_defown: too many parameters!"
    
    makl_set_var_mk "DEFOWN" $1
}

##\brief Handler. Set default file group id.
##
##  Set default file group id to \e $1.
##
##  \param $1 group id
##  
__makl_defgrp ()
{
    shift -1 2>/dev/null
    [ ! $2 ] || _makl_args_err "--makl_defgrp: too many parameters!"
    
    makl_set_var_mk "DEFGRP" $1
}

##\brief Handler. Set default file mode for regular files.
##
##  Set default file mode for regular files to \e $1. The mode should be 
##  a string formed by 3 octal digits (RWX).
##
##  \param $1 mode
##  
__makl_defmode ()
{
    shift -1 2>/dev/null
    [ ! $2 ] || _makl_args_err "--makl_defmode: too many parameters!"

    makl_is_mode $1
    [ $? = 0 ] || makl_err 2 "Invalid mode: $1 (3 octal digits)"
    
    makl_set_var_mk "DEFMODE" $1
}

##\brief Handler. Set default file mode for binary files.
##
##  Set default file mode for binary files to \e $1. The mode should be 
##  a string formed by 3 octal digits (RWX).
##
##  \param $1 mode
##  
__makl_defbinmode ()
{
    shift -1 2>/dev/null
    [ ! $2 ] || _makl_args_err "--defbinmode: too many parameters!"

    makl_is_mode $1
    [ $? = 0 ] || makl_err 2 "Invalid mode: $1 (3 octal digits)"
    
    makl_set_var_mk "DEFBINMODE" $1
}

##\brief Handler. Enable a feature.
##
##  Enable a feature of type \e $1 with id \e $2.
##  Please refer to ./configure --help for valid feature types and ids.
##
##  \param $1 feature type
##  \param $2 feature id
##
__makl_enable ()
{
    f_feat=${makl_run_dir}/deps_$1.optional
    [ -f ${f_feat} ] || _makl_args_err "--makl_enable: Invalid feature type $1"

    makl_tab_set ${f_feat} $2 2 1
}

##\brief Handler. Disable a feature.
##
##  Disable a feature of type \e $1 with id \e $2.
##  Please refer to ./configure --help for valid feature types and ids.
##
##  \param $1 feature type
##  \param $2 feature id
##
__makl_disable ()
{
    f_feat=${makl_run_dir}/deps_$1.optional
    [ -f ${f_feat} ] || _makl_args_err "--makl_enable: Invalid feature type $1"
    
    makl_tab_set ${f_feat} $2 2 0
}

##\brief Handler. Set parameters for an executable feature.
## 
##  Set parameters for an executable feature \e $1. 
##  \e $2 is the path of the file corresponding to the feature.
##
##   \param $1 feature id 
##   \param $2 file to be executed
##
__makl_featx ()
{
    f_featx=${makl_run_dir}/args_featx
    makl_tab_find ${f_featx} $1
    [ $? = 0 ] || _makl_args_err "--makl_featx: Invalid featx: $1"

    makl_tab_set ${f_featx} $1 2 $2
}

##\brief Handler. Set parameters for a library dependency.
##
##  Set parameters for a library dependency \e $1. 
##  \e $2 is the path of the base directory for the library.
##
##   \param $1 library id
##   \param $2 library base directory
##   \return 0 on success, 1 on argument error 
##
__makl_lib ()
{
    f_lib=${makl_run_dir}/args_lib

    [ $1 ] || _makl_args_err "--makl_lib: missing package name!"
    libs=${makl_run_dir}/args_lib
    makl_tab_find ${libs} $1
    [ $? = 0 ] || _makl_args_err "--makl_lib: undefined library $1"
    
    makl_tab_set ${f_lib} $1 2 $2
}

##\brief Print an error message followed by usage.
##
##  Print an error message \e $1 followed by the usage. 
##  This function is to be called on an user argument error.
##  Give up with exit code 1.
##
##   \param $1 message
##
_makl_args_err ()
{
    __makl_help 
    echo
    makl_err 1 $1
}

## \brief Handle an argument.
##
## Handle an command-line argument \e $1 by calling the corresponding function.
## 
##   \param $1 argument to be handled
##
_makl_arg_handle ()
{
    cmd=`echo $1 | cut -f3 -d"-" | cut -f1 -d"="`
    id=`echo $1 | cut -s -f4 -d"-" | cut -f1 -d"="`
    val=`echo $1 | cut -s -f2 -d"="`

    __makl_${cmd} ${id} "${val}"
    [ $? = 0 ] || _makl_args_err "Failed command: '${cmd}'!"
}
