#
# $Id: makl_args_handle,v 1.6 2005/08/01 09:53:17 stewy Exp $
#



_makl_help () 
{
    echo 
    echo "'MaKL' - a painless C project configuration tool"
    echo 
    echo "Usage: ./CONFIGURE_SCRIPT [OPTION] ..."
    echo 
    echo "OPTION can be defined as follows:"
    echo 
    _makl_help_opts
    echo
    echo "Legend:"       
    echo "  <*>: package-specific options" 
    echo "  <x>: required dependency" 
    echo "  < >: optional dependency" 
    echo
}


_makl_help_opts() 
{
    file=${makl_run_dir}/args 
    cat ${file} | {
        while read line; do 
            id=`echo ${line} | cut -d "|" -f 1`
            pms=`echo ${line} | cut -d "|" -f 2`
            dsc=`echo ${line} | cut -d "|" -f 3`
            echo "--"${id}${pms} $'\t' $'\t' ${dsc}
            cat ${makl_run_dir}/args_"${id}" | { 
                while read lin; do
                    ID=`echo ${lin} | cut -d "|" -f 1`
                    pfx=`echo ${lin} | cut -d "|" -f 2`
                    echo "<*>${pfx} --"${id}${pms} | 
                        sed 's/X/'"${ID}"'/' |
                        cut -d "=" -f 1
                done
            }
        done
    }
}

# _makl_prefix
#
#   $2 <must be empty>
_makl_prefix ()
{
    shift -1 &>/dev/null
    [ ! $2 ] || makl_err 1 "makl_prefix: too many parameters!"

    echo "1: $1, 2: $2"
}


# makl_set_var wrapper
# 
#   $1 - variable name
#   $2 - variable value
_makl_set ()
{
    [ $1 ] || makl_err 1 "makl_set: missing variable name!"

    makl_set_var $1 $2 
}


# makl_set_var_h wrapper
#
#   $1 - variable name
#   $2 - variable value
_makl_set_h ()
{
    [ $1 ] || makl_err 1 "makl_set_h: missing variable name!"

    makl_set_var_h $1 $2  
}


# makl_set_var_mk wrapper
#
#   $1 - variable name
#   $2 - variable value 
_makl_set_mk ()
{
    [ $1 ] || makl_err 1 "makl_set_mk: missing variable name!"

    makl_set_var_mk $1 $2  
}


# makl_add_var_mk wrapper
#
#   $1 - variable name
#   $2 - string to append 
_makl_add_mk ()
{
    [ $1 ] || makl_err 1 "makl_add_mk: missing variable name!"

    makl_add_var_mk $1 $2
}


# makl_unset_var wrapper
# 
#   $1 variable name
#   $2 <must be empty>
_makl_unset ()
{
    [ $1 ] || makl_err 1 "makl_unset: missing variable name!"
    [ ! $2 ] || makl_err 1 "makl_unset: too many parameters!"

    makl_unset_var $1 
}


# makl_unset_var_h wrapper
#
#   $1 - variable name
#   $2 <must be empty>
_makl_unset_h ()
{
    [ $1 ] || makl_err 1 "makl_unset_h: missing variable name!"
    [ ! $2 ] || makl_err 1 "makl_unset_h: too many parameters!"

    makl_unset_var_h $1
}


# makl_unset_var_mk wrapper
#
#   $1 - variable name
#   $2 <must be empty>
_makl_unset_mk ()
{
    [ $1 ] || makl_err 1 "makl_unset_mk: missing variable name!"
    [ ! $2 ] || makl_err 1 "makl_unset_mk: too many parameters!"

    makl_unset_var_mk $1
}


# makl_feature_c wrapper
#
# $1 feature id
# $2 file to be compiled
_makl_feat_c ()
{
    file=`  echo $2 | cut -f1 -d":"`
    flags=` echo $2 | cut -s -f2 -d":"`

    makl_feature_c $1 ${file} "${flags}" 1>/dev/null
    [ $? = 0 ] || makl_err 2 "makl_feat_c: feature $1 - failed to compile $2" 
}


# makl_feature_x wrapper
# 
# $1 feature id 
# $2 file to be executed
_makl_feat_x ()
{
    makl_feature_x $1 $2 1>/dev/null
    [ $? = 0 ] || makl_err 2 "makl_feat_x: feature $1 - failed to execute $2"
}


# makl_libdep wrapper
#
# $1 library id
# $2 value="<base_dir>:[<tst_file>]"
_makl_lib ()
{
    [ $1 ] || makl_err 1 "makl_lib: missing package name!"
    [ $2 ] || makl_err 1 "makl_lib: requires value argument!"

    id=$1
    base=`echo $2 | cut -f1 -d":"`
    tst=`echo $2 | cut -s -f2 -d":"`
    
    if [ ${tst} ]; then
        [ -r ${tst} ] || makl_err 2 "makl_lib: unreadable test file (${tst})!" 
    else
        # try default test file
        tst=`pwd`/build/lib$1.c
        [ -r ${tst} ] || makl_err 2 "makl_lib: no test file for $1 (${tst})!" 
    fi

    makl_libdep ${id} ${base} ${tst}

    # add to list of found libs
    if [ $? = 0 ]; then
       makl_req_found "lib" ${id}
    fi

    return $?
}


# Print error message followed by usage
#
# $1 message
_makl_args_err ()
{
    _makl_help 
    echo
    makl_err 1 $1
}


# Handle an argument
#
#   $1 - argument to handle
_makl_arg_handle ()
{
    cmd=`   echo $1 | cut -f3 -d"-" | cut -f1 -d"="`
    id=`    echo $1 | cut -f4 -d"-" | cut -f1 -d"="`
    val=`   echo $1 | cut -s -f2 -d"="`

    _makl_${cmd} ${id} "${val}"
    [ $? = 0 ] || _makl_args_err "Undefined command: '${cmd}'!"
}


# makl_args_handle
# 
#   "$@" - command line arguments 
makl_args_handle()
{
    for arg in "$@"; do
        pref=`echo ${arg} | cut -c1,2`
        cmd=`echo ${arg} | cut -f3 -d"-" | cut -f1 -d"="`
        if [ ${arg} = "-h" ]; then
            _makl_help
            exit 1
        else 
            [ ${pref} = "--" ] || _makl_args_err "Undefined command: ${arg}!"
            if [ ${cmd} = "help" ]; then
                _makl_help
                exit 1 
            else
                _makl_arg_handle "${arg}"
            fi
        fi
    done

    _makl_require_check "lib"
}
