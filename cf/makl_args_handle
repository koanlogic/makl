#
# $Id: makl_args_handle,v 1.16 2005/10/03 18:57:52 stewy Exp $
#


## \brief handler - print out the help menu.
## 
_makl_help () 
{
    echo 
    echo "'MaKL' - a painless C project configuration tool"
    echo 
    echo "Usage: ./CONFIGURE_SCRIPT [OPTION] ..."
    echo 
    echo "OPTION can be defined as follows:"
    echo 
    _makl_help_opts
    echo
    echo "Legend:"       
    echo "  <*>: required dependency" 
    echo "  <?>: optional dependency" 
    echo "  < >: unset variable" 
    echo "  <x>: set variable" 
    echo

    makl_cleanup_rundir
}

## \brief Print out the options.
##
_makl_help_opts() 
{
    file_args=${makl_run_dir}/args 

    # print out arguments
    [ -e ${file_args} ] && \
    cat ${file_args} | {
        while read line; do 
            id=`makl_tab_elem "${line}" 1`
            pms=`makl_tab_elem "${line}" 2`
            dft=`makl_tab_elem "${line}" 3`
            dsc=`makl_tab_elem "${line}" 4`
            [ -e ${makl_run_dir}/args_"${id}" ] && \
            cat ${makl_run_dir}/args_"${id}" | { 
                while read lin; do
                    ID=`makl_tab_elem "${lin}" 1`
                    DFT=`makl_tab_elem "${lin}" 2`
                    PFX=`makl_tab_elem "${lin}" 3`
                    DSC=`makl_tab_elem "${lin}" 4`
                    makl_args_print "${id}" "${pms}" "${dsc}" "${ID}" \
                                    "${DFT}" "${PFX}" "${DSC}"

                done
            } || {
                echo -n "--"${id}${pms} "     "  ${dsc}
                [ "${dft}" = " " ] || echo -n " [${dft}]"
            }
            echo
        done
    }
}

##\brief handler - don't clean cache at end of execution.
##
_makl_noclean ()
{
    [ $# -gt 1 ] && _makl_args_err "--noclean: Too many arguments"

    makl_set "__noclean__" 1
}

##\brief handler - set the base installation directory to pfx.
##
##   \param $1 base installation directory
##   \param $2 <must be empty>
##
_makl_prefix ()
{
    shift -1 2>/dev/null
    [ ! $2 ] || _makl_args_err "--makl_prefix: too many parameters!"
    
    makl_set_var_mk "DESTDIR" $1
}

##\brief handler - set directory for specific data type.
##
##   \param $1 directory type
##   \param $2 directory path
##
_makl_dir ()
{
    [ ! -z $1 ] || _makl_args_err "--makl_dir: Missing directory type!"
    [ ! -z $2 ] || _makl_args_err "--makl_dir: Missing target directory!"
      
    f_dirs=${makl_run_dir}/args_dir
    makl_tab_find ${f_dirs} $1
    
    [ $? = 0 ] || makl_err 2 "_makl_dir: Bad directory type: $1"
    
    makl_set_var_mk `makl_upper $1`"DIR" $2
}

##\brief handler - set default file owner id.
##
##  \param $1 owner id
##  \param $2 <must be empty>
##  
_makl_defown ()
{
    shift -1 2>/dev/null
    [ ! $2 ] || _makl_args_err "--makl_defown: too many parameters!"
    
    makl_set_var_mk "DEFOWN" $1
}

##\brief handler - set default file group id.
##
##  \param $1 group id
##  \param $2 <must be empty>
##  
_makl_defgrp ()
{
    shift -1 2>/dev/null
    [ ! $2 ] || _makl_args_err "--makl_defgrp: too many parameters!"
    
    makl_set_var_mk "DEFGRP" $1
}

##\brief handler - set default file mode for regular files.
##
##  \param $1 mode
##  \param $2 <must be empty>
##  
_makl_defmode ()
{
    shift -1 2>/dev/null
    [ ! $2 ] || _makl_args_err "--makl_defmode: too many parameters!"

    makl_is_mode $1
    [ $? = 0 ] || makl_err 2 "Invalid mode: $1 (3 octal digits)"
    
    makl_set_var_mk "DEFMODE" $1
}

##\brief handler - set default file mode for binary files.
##
##  \param $1 mode
##  \param $2 <must be empty>
##  
_makl_defbinmode ()
{
    shift -1 2>/dev/null
    [ ! $2 ] || _makl_args_err "--defbinmode: too many parameters!"

    makl_is_mode $1
    [ $? = 0 ] || makl_err 2 "Invalid mode: $1 (3 octal digits)"
    
    makl_set_var_mk "DEFBINMODE" $1
}

##\brief Enable a feature.
##
_makl_enable ()
{
    f_feat=${makl_run_dir}/deps_$1.optional
    [ -f ${f_feat} ] || _makl_args_err "--makl_enable: Invalid feature type $1"

    makl_tab_set ${f_feat} $2 2 1
}

##\brief Disable a feature
##
_makl_disable ()
{
    f_feat=${makl_run_dir}/deps_$1.optional
    [ -f ${f_feat} ] || _makl_args_err "--makl_enable: Invalid feature type $1"
    
    makl_tab_set ${f_feat} $2 2 0
}

##\brief handler - executable feature
## 
##   \param $1 feature id 
##   \param $2 file to be executed
##
_makl_featx ()
{
    f_featx=${makl_run_dir}/args_featx
    makl_tab_find ${f_featx} $1
    [ $? = 0 ] || _makl_args_err "--makl_featx: Invalid featx: $1"

    makl_tab_set ${f_featx} $1 2 $2
}

##\brief handler - library dependency
##
##   \param $1 library id
##   \param $2 value=<base_dir> (optional)
##   \param $3 CFLAGS (optional)
##   \param $4 LDFLAGS (optional)
##   \return 0 on success, 1 on argument error, 2 on missing test file, 
##   3 on unsuccessful compilation.
##
_makl_lib ()
{
    [ $1 ] || _makl_args_err "--makl_lib: missing package name!"
    libs=${makl_run_dir}/args_lib
    makl_tab_find ${libs} $1
    [ $? = 0 ] || _makl_args_err "--makl_lib: undefined library $1"
    
    # check for inline code
    tst=${makl_run_dir}/lib_testcode_$1.c
    if [ ! -r ${tst} ]; then
        tst=`pwd`/build/lib$1.c
        if [ ! -r ${tst} ]; then
            makl_warn "--makl_lib: no test file for $1 (${tst})!" 
            return 2
        fi
    fi
    
    makl_libdep $1 $2 ${tst} "$3" "$4"

    # add to list of found libs
    if [ $? = 0 ]; then
        makl_req_found "lib" $1
        return 0
    else
        return 3
    fi
}

##\brief Print error message followed by usage.
##
##   \param $1 message
##
_makl_args_err ()
{
    _makl_help 
    echo
    makl_err 1 $1
}

## \brief Handle an argument.
## 
##   \param $1 argument to handle
##
_makl_arg_handle ()
{
    cmd=`echo $1 | cut -f3 -d"-" | cut -f1 -d"="`
    id=`echo $1 | cut -s -f4 -d"-" | cut -f1 -d"="`
    val=`echo $1 | cut -s -f2 -d"="`

    _makl_${cmd} ${id} "${val}"
    [ $? = 0 ] || _makl_args_err "Failed command: '${cmd}'!"
}

##\brief Initialise command line arguments. Should be first call in configure
##       script.
##
##  \param "$@" command line arguments
##
makl_args_init ()
{
    makl_dbg "preprocessing command-line arguments"

    for arg in "$@"; do
        if [ "${arg}" = "--help" ]; then
            makl_set "__noconfig__" 1
        fi
    done
}

##\brief Process the configure command-line arguments. Should be last call in
##       configure script.
##
##   \param "$@" command line arguments 
##
makl_args_handle ()
{
    makl_dbg "handling command-line arguments"

    for arg in "$@"; do
        pref=`echo ${arg} | cut -c1,2`
        cmd=`echo ${arg} | cut -f3 -d"-" | cut -f1 -d"="`
        if [ ${arg} = "-h" ]; then
            _makl_help
            exit 1
        else 
            [ ${pref} = "--" ] || _makl_args_err "Undefined command: ${arg}!"
            if [ ${cmd} = "help" ]; then
                _makl_help
                exit 1 
            else
                _makl_arg_handle "${arg}"
            fi
        fi
    done

    [ -z `makl_get "__noconfig__"` ] || return

    makl_dbg "checking dependencies"

    _makl_require_check "lib"
    _makl_require_check "featx"
}
