#
# $Id: makl_deps,v 1.9 2005/09/29 15:29:11 stewy Exp $
#


##\brief Add a required dependency.
##
##   \param $1 dependency type
##   \param $2 dependency value
##   \param $3 defaults 
##   
makl_require ()
{
    [ -z `makl_get "__noconfig__"` ] || return
    makl_dbg "adding required $1 dependency: $2"

    file=${makl_run_dir}/deps_$1.require

    makl_tab_find ${file} $2
    [ $? = 0 ] && return
    
    echo $2 >> ${file}
    makl_args_add $1 $2 "$3" "<*>" ""
}

##\brief Add an optional dependency.
##
##   \param $1 enabled by default
##   \param $2 dependency type
##   \param $3 dependency value
##   \param $4 defaults
##   
makl_optional ()
{
    [ -z `makl_get "__noconfig__"` ] || return
    makl_dbg "adding optional $2 dependency: $3"

    file=${makl_run_dir}/deps_$2.optional
    
    makl_tab_find ${file} $3
    [ $? = 0 ] && return
    
    echo "$3|$1" >> ${file}
    makl_args_add $2 $3 "$4" "<?>" ""
}

##\brief Mark a found dependency.
##
##   \param $1 dependency type
##   \param $2 dependency value
##
makl_req_found ()
{
    file=${makl_run_dir}/deps_$1.found

    makl_tab_find ${file} $2
    [ $? = 0 ] && return
    
    echo $2 >> ${file}
}

##\brief Search for lib in default dirs.
##
##   \param $1 required lib  
##   \param 0 on success, 1 on lib not found.
##
_makl_search_lib ()
{
    file=${makl_run_dir}/args
    
    str=`makl_tab_get ${file} "lib" 3`
    val=`makl_tab_var "${str}" "BASE"` 
    dirs=`echo ${val} | sed 's/:/ /'`

    for dir in ${dirs}; do
        _makl_lib $1 ${dir}
        if [ $? = 0 ]; then 
            return 0
        else
            makl_dbg "Failed $1 compilation in ${dir}"
        fi
    done 

    return 1
}

##\brief Check that "type" dependencies have been fulfilled.
##
##   \param $1 dependency type
##   
_makl_require_check ()
{
    f_req=${makl_run_dir}/deps_$1.require
    f_opt=${makl_run_dir}/deps_$1.optional
    f_have=${makl_run_dir}/deps_$1.found

    if [ ! -r ${f_req} ]; then
        return 0
    fi
    if [ ! -r ${f_have} ]; then
        touch ${f_have}
    fi

    rm -f ${makl_run_dir}/err

    cat ${f_req} | {
        while read req; do
            cat ${f_have} 2>/dev/null | {
                found=0
                while read have; do
                    if [ ${have} = ${req} ]; then
                        found=1
                    fi
                done
                if [ ${found} = 0 ]; then
                    # look in default directories before panic
                    makl_dbg "searching for '$1${req}' in default paths" 
                    case $1 in
                        lib)
                            _makl_search_lib ${req}
                            ;;
                        *) 
                            ;;
                    esac
                    if [ ! $? = 0 ]; then
                        echo -n ${req} > ${makl_run_dir}/err
                        break
                    fi
                fi
            }
        done
    }

    # try to find optional dependencies which are enabled by default   
    cat ${f_opt} 2>/dev/null | {
        while read opt; do
            id=`makl_tab_elem ${opt} 1`
            makl_dbg "searching for '$1${id}' in default paths" 
            case $1 in
                lib)
                    dft=`makl_tab_elem ${opt} 2`
                    if [ ${dft} = "1" ]; then
                        _makl_search_lib ${id}
                        [ $? = 0 ] || \
                            makl_warn "could not find optional library in default paths"
                    fi
                    ;;
                *) 
                    ;;
            esac
        done
    }
   
    if [ -r ${makl_run_dir}/err ]; then
        makl_err 3 "unfulfilled dependency: '`cat ${makl_run_dir}/err`'!"
    fi  
}

##\brief Set the test code for library id. Data is read from standard
##   input.
##
##   \param $1 library id
##
makl_lib_testcode ()
{
    file=${makl_run_dir}/lib_testcode_$1.c

    # create a clean file
    [ -r ${file} ] && rm -f ${file}

    while read line; do
        echo ${line} >> ${file}
    done
}
