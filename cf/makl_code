#
# $Id: makl_code,v 1.6 2005/09/27 13:36:27 stewy Exp $
#

##\brief Compile C file $1 with the supplied flags $2
## 
##   \param $1 Pathname of the C file to be compiled 
##   \param $2 CFLAGS string to be passed to the compiler
##   \return '0' on success, '1' on failure
##
makl_compile ()
{
    if [ ! "$1" ]; then
        makl_err 1 "makl_compile called with no arguments"
    fi

    c_file=$1
    shift
    c_flags=$*
   
    makl_dbg "compiling ${c_file} in ${makl_run_dir} with flags ${c_flags}"

    (
        cp ${c_file} ${makl_run_dir} 2>/dev/null
        cd ${makl_run_dir}

        ${CC} ${c_flags} `basename ${c_file}`
    )

    [ $? -ne 0 ] && return 1

    return 0
}

##\brief Write to a C file. Data is read from standard input.
## 
##   \param $1 name of file to be written
##   \param $2 whether the code is a snippet (1) or entire C file (0)
##
makl_write_c ()
{
    # create a clean file
    [ -r $1 ] && rm -f $1

    if [ $2 = 1 ]; then
        echo "int main() {" >> $1
    fi
    
    while read line; do
        echo ${line} >> $1
    done
    
    if [ $2 = 1 ]; then
        {
        echo "return 0;"
        echo "}"
        } >> $1
    fi
    
    return 0
}

##\brief Compile C code.
##
##   \param $1 whether the code is a snippet (1) or entire C file (0)
##   \param $2 CFLAGS to be passed to the compiler
##
makl_compile_code ()
{
    file=${makl_run_dir}/makl_code.c

    makl_write_c ${file} $1
    #cat ${file}

    makl_compile ${file} $2
    [ $? = 0 ] || return 1

    return 0
}

##\brief Execute C code.
##
##   \param $1 whether the code is a snippet (1) or entire C file (0)
##   \param $2 cflags to be passed to the compiler
## 
makl_exec_code ()
{
    file=${makl_run_dir}/makl_code.c
    
    makl_write_c ${file} $1
    #cat ${file}

    makl_compile ${file} $2 
    [ $? = 0 ] || return 1

    cd ${makl_run_dir} && eval ${makl_run_dir}/a.out >/dev/null
    [ $? = 0 ] || return 2

    return 0
}

##\brief Define HAVE_$1 if function $1 is found.
##
##   \param $1 function name
##   \param $2 CFLAGS
##
makl_checkfunc ()
{
    [ -z `makl_get "__noconfig__"` ] || return

    echo "$1();" | makl_compile_code 1 $2

    if [ $? = 0 ]; then
        makl_set_var_h "HAVE_"`makl_upper $1`
        return 0
    else
        makl_err 1 "failed check on function '$1'!" 
    fi
}

##\brief Define HAVE_$1 if type $1 is found.
## 
##   \param $1 data type
##   \param $2 includes
##
makl_checktype ()
{
    [ -z `makl_get "__noconfig__"` ] || return

    type=$1
    shift

    {
        for arg in $*; do
            echo "#include ${arg}"
        done
        echo "
            int main() {
                ${type} x;
            }" 
    } | makl_compile_code 0 

    if [ $? = 0 ]; then
        makl_set_var_h "HAVE_"`makl_upper ${type}`
        return 0
    else
        makl_err 1 "failed check on type '${type}'!" 
    fi
}
