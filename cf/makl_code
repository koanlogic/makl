#
# $Id: makl_code,v 1.1 2005/09/04 12:37:53 stewy Exp $
#

# makl_compile c_file c_flags1 ... c_flagsn
#
#   Compile c_file with the supplied c_flags
#   $1 - Pathname of the C file to be compiled 
#   $2 - CFLAGS string to be passed to the compiler
#   Return '0' on success, '1' on failure.
#
makl_compile ()
{
    if [ ! "$1" ]; then
        makl_err 1 "makl_compile called with no arguments"
    fi

    c_file=$1
    shift
    c_flags=$*
   
    makl_dbg "compiling ${c_file} in ${makl_run_dir} with flags ${c_flags}"

    (
        cp ${c_file} ${makl_run_dir} &>/dev/null
        cd ${makl_run_dir}

        ${CC} ${c_flags} `basename ${c_file}`
    )

    [ $? -ne 0 ] && return 1

    return 0
}

# makl_write_c file snip
#
#   Write to a C file. Data read is read from standard input.
#   $1 - name of file to be written
#   $2 - whether the code is a snippet (1) or entire C file (0)
#
makl_write_c ()
{
    # create a clean file
    [ -r $1 ] && rm -f $1

    if [ $2 = 1 ]; then
        echo "int main() {" >> $1
    fi
    
    while read line; do
        echo ${line} >> $1
    done
    
    if [ $2 = 1 ]; then
        {
        echo "return 0;"
        echo "}"
        } >> $1
    fi
    
    return 0
}

# makl_compile_code snip cflags
# 
#   Compile C code.
#   $1 - whether the code is a snippet (1) or entire C file (0)
#   $2 - CFLAGS to be passed to the compiler
#
makl_compile_code ()
{
    echo "Compiling Code"
    file=${makl_run_dir}/makl_code.c

    makl_write_c ${file} $1
    cat ${file}

    makl_compile ${file} $2
    [ $? = 0 ] || return 1

    return 0
}

# makl_exec_code snip cflags
#
#   Execute C code.
#   $1 - whether the code is a snippet (1) or entire C file (0)
#   $2 - cflags to be passed to the compiler
# 
makl_exec_code ()
{
    echo "Executing Code"
    file=${makl_run_dir}/makl_code.c
    
    makl_write_c ${file} $1
    cat ${file}

    makl_compile ${file} $2 
    [ $? = 0 ] || return 1

    eval ${makl_run_dir}/a.out 2>/dev/null
    [ $? = 0 ] || return 2

    return 0
}
