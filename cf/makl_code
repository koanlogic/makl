#
# $Id: makl_code,v 1.11 2005/09/30 09:29:36 stewy Exp $
#

##\brief Compile C file $1 with the supplied flags $2
## 
##   \param $1 Pathname of the C file to be compiled 
##   \param $2 CFLAGS string to be passed to the compiler
##   \return '0' on success, '1' on failure
##
makl_compile ()
{
    if [ ! "$1" ]; then
        makl_err 1 "makl_compile called with no arguments"
    fi

    c_file=$1
    shift
    c_flags=$*
    cwd=`pwd`
   
    cp ${c_file} ${makl_run_dir} 2>/dev/null
    cd ${makl_run_dir}

    ${CC} ${c_flags} `basename ${c_file}`

    if [ $? -ne 0 ]; then
        cd ${cwd} 
        return 1
    fi 

    cd ${cwd}
    return 0
}

##\brief Write to a C file. Data is read from standard input.
## 
##   \param $1 name of file to be written
##   \param $2 whether the code is a snippet (1) or entire C file (0)
##
makl_write_c ()
{
    # create a clean file
    [ -r $1 ] && rm -f $1

    if [ $2 = 1 ]; then
        echo "int main() {" >> $1
    fi
    
    while read line; do
        echo ${line} >> $1
    done
    
    if [ $2 = 1 ]; then
        {
        echo "return 0;"
        echo "}"
        } >> $1
    fi
    
    return 0
}

##\brief Compile C code.
##
##   \param $1 whether the code is a snippet (1) or entire C file (0)
##   \param $2 CFLAGS to be passed to the compiler
##
makl_compile_code ()
{
    file=${makl_run_dir}/makl_code.c

    makl_write_c ${file} $1

    makl_compile ${file} $2
    [ $? = 0 ] || return 1

    return 0
}

##\brief Execute C code.
##
##   \param $1 whether the code is a snippet (1) or entire C file (0)
##   \param $2 cflags to be passed to the compiler
## 
makl_exec_code ()
{
    file=${makl_run_dir}/makl_code.c
    cwd=`pwd`
    
    makl_write_c ${file} $1
    makl_compile ${file} $2 
    [ $? = 0 ] || return 1

    cd ${makl_run_dir} && eval ./a.out > /dev/null 2> /dev/null
    if [ $? -ne 0 ]; then 
        cd ${cwd}
        return 2
    fi

    cd ${cwd}   
    return 0
}

##\brief Define HAVE_$1 if function $1 is found.
##
##   \param $1 function name
##   \param $2 CFLAGS
##
makl_checkfunc ()
{
    [ -z `makl_get "__noconfig__"` ] || return

    makl_dbg "checking for function $1"

    echo "$1();" | makl_compile_code 1 $2

    if [ $? = 0 ]; then
        makl_set_var_h "HAVE_"`makl_upper $1`
        return 0
    else
        makl_err 1 "failed check on function '$1'!" 
    fi
}

##\brief Define HAVE_$2 if header $3 is found.
##
##  \param $1 0:optional,1:required
##  \param $2 id of header
##  \param $3 header file
##
makl_checkheader ()
{
    [ -z `makl_get "__noconfig__"` ] || return

    makl_dbg "checking for header $2"

    {
        echo "#include $3"
        echo "int main() { return 0; }"
    } | makl_compile_code 0

    if [ $? = 0 ]; then
        makl_set_var_h "HAVE_"`makl_upper $2`
        return 0
    else
        [ $1 = 1 ] && makl_err 1 "failed check on required header $2: $3"
        makl_warn "failed check on optional header $2: $3"
        return 1
    fi
}

##\brief Define HAVE_$1 if type $1 is found.
## 
##   \param $1 data type
##   \param $2 includes
##
makl_checktype ()
{
    [ -z `makl_get "__noconfig__"` ] || return

    makl_dbg "checking for type $1"

    type=$1
    shift

    {
        for arg in $*; do
            echo "#include ${arg}"
        done
        echo "
            int main() {
                ${type} x;
            }" 
    } | makl_compile_code 0 

    if [ $? = 0 ]; then
        makl_set_var_h "HAVE_"`makl_upper ${type}`
        return 0
    else
        makl_err 1 "failed check on type '${type}'!" 
    fi
}
