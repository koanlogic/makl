#
# $Id: makl_var,v 1.8 2005/09/26 18:41:42 stewy Exp $
#

##\brief Set 'name' to 'value' in ${makl_conf_h}.
##
##   \param $1 symbol to set
##   \param $2 value of symbol (optional)
##   \param $3 whether the value is to be interpreted as a string
##
makl_set_var_h ()
{
    val=$2
    [ "${val}" ] || val="1"
    if [ $3 ];  then                #string
        val="\"${val}\""
    else                            #integer
        # check that val is numeric
        echo ${val} | grep '^-\?[0-9][0-9]*$' >/dev/null
        [ $? = 0 ] || makl_err 1 "Invalid numeric $1=${val}!"
    fi

    makl_var_set "h" "$1" 1 ${val}
}

#\brief Set 'name' to 'value' in ${makl_makefile_conf}.
#
#   \param $1 symbol to set
#   \param $2 value of symbol
#
makl_set_var_mk ()
{
    val=$2
    [ "${val}" ] || val="1"
    makl_var_set "mk" "$1" 1 "${val}"
}

##\brief Append 'value' to 'name' in ${makl_makefile_conf}.
##
##   \param $1 symbol to set
##   \param $2 value to add
##
makl_add_var_mk ()
{
    val=`makl_get_var_mk "$1"`
    makl_set_var_mk "$1" "${val}"" $2"
}

##\brief Unset 'name' in ${makl_conf_h}.
##
##   \param $1 symbol to unset
##
makl_unset_var_h ()
{
    makl_var_set "h" "$1" 0 
}

##\brief Unset 'name' in ${makl_makefile_conf}.
##
##   \param $1 symbol to unset
##
makl_unset_var_mk ()
{
    makl_dbg "unsetting $1 in ${makl_makefile_conf}"

    makl_var_set "mk" "$1" 0
}

##\brief Unset 'name' in both ${makl_makefile_conf} and ${makl_conf_h}
##
##   \param $1 symbol to unset
##   \return '0' on success, '1' otherwise.
##
makl_unset_var ()
{
    if [ ! "$1" -o -z "$1" ]; then
        makl_warn "makl_unset_var called with no argument"
        return 1
    fi
   
    makl_unset_var_h  $1
    makl_unset_var_mk $1

    return 0
}

##\brief Set 'name' to 'value' in both ${makl_makefile_conf} and ${makl_conf_h}
##
##   \param $1 symbol to set
##   \param $2 value of symbol
##   \param $3 whether the value is to be interpreted as a string
##
makl_set_var ()
{
    makl_set_var_h  $1 $2 $3
    makl_set_var_mk $1 $2 
}

##\brief Set internal variable var to val.
##
##   \param $1 name of variable
##   \param $2 value of variable
##
makl_set ()
{
    makl_var_set "cf" $1 1 $2
}

##\brief Get the value of an internal variable.
##
##   \param $1 name of variable
##   \return 0 if element was found, 1 otherwise.
##
makl_get ()
{
    makl_var_get "cf" $1

    return $?
}

##\brief Get mk variable
##
##   \return the value of the variable
##
makl_get_var_mk () 
{
    makl_var_get "mk" $1

    return $?
}

##\brief Define variable (var=val) 
##
##   \param $1 type of variable
##   \param $2 description
##
makl_vars_def ()
{
    file=${makl_run_dir}/vars
    
    makl_tab_find ${file} $1
    [ $? = 0 ] && return
    
    makl_tab_set_row ${file} $1 "$2"

    # create file to store instances of variable
    file=${file}_$1
    touch ${file}
}
