#
# $Id: makl_utils_tab,v 1.8 2005/10/05 16:09:27 stewy Exp $
#


##\brief Find an identifier.
##
##  Check whether id \e $2 exists in table \e $1. 
##
##   \param $1 table file
##   \param $2 id to be searched for
##   \return 0 if found, 1 otherwise.
##
makl_tab_find ()
{
    [ -e $1 ] || return 1

    grep "^$2" $1 > /dev/null

    return $?
}

##\brief Set the value of an element corresponding to an identifier.
##
##  Set variable entry in table \e $1 with id \e $2 and at column 
##  \e $3 to val \e $4.
##
##   \param $1 table file 
##   \param $2 id (row)
##   \param $3 column
##   \param $4 value
##
makl_tab_set ()
{ 
    line=""
    line_n=""
    l=""
    new=""
    i=1

    # create file if doesn't exist
    [ -e $1 ] || touch $1

    line=`grep "^$2" $1`        

    # if found delete line (get first)
    if [ $? = 0 ]; then     
        grep -v "^$2" $1 > $1.tmp
        mv $1.tmp $1
    fi
            
    # set value in appropriate column
    while true; do
        
        l=`makl_tab_elem "${line}" ${i}` 
        [ -z "${l}" ] && [ ${i} -gt $3 ] && break

        if [ ${i} = 1 ]; then
            new=$2
        elif [ ${i} = $3 ]; then
            new=$4
        else
            new=${l} 
        fi
        [ -z "${new}" ] && new=" "

        if [ ${i} = 1 ]; then
            line_n="${new}"
        else
            line_n="${line_n}|${new}"
        fi

        i=$((${i}+1))
    done

    # append new line to end of file
    echo ${line_n} >> $1

    return 0    
}

##\brief Set row to given arguments.
##
##  Set row of table \e $1 to given arguments \e $@.
##
##   \param $1 table file
##   \param $@ row values
##
makl_tab_set_row ()
{
    line=""
    file=$1
    i=1

    # create file if doesn't exist
    [ -e $1 ] || touch $1

    shift

    makl_tab_find ${file} $1
    [ $? = 0 ] && return

    for arg in "$@"; do
        if [ ${i} = 1 ]; then
            line="${arg}"
        else
            [ -z "${arg}" ] && arg=" "
            line="${line}|${arg}"
        fi
        i=$((${i}+1))
    done

    echo ${line} >> ${file}
}

##\brief Get a column value given an identifier.
##
##  Get column \e $3 of element with id \e $2 in file \e $1.
##
##   \param $1 table file 
##   \param $2 identifier to be retrieved
##   \param $3 target column
##   \return 0 if the element was found, 1 otherwise.
##
makl_tab_get ()
{
    found=`grep "^$2" $1`
    [ $? = 0 ] || return $? 

    val=`echo ${found} | cut -s -f $3 -d "|"`
    ret=$?

    echo -n ${val}
    return ${ret}
}

##\brief Output an element at an index of a row.
##
##  Output element at index \e $2 of row \e $1.
##
##   \param $1 string of elements
##   \param $2 index of element
##
makl_tab_elem ()
{
    echo "$1" | cut -s -f $2 -d "|"
}

##\brief Get variable by name given a list of variables.
##
##  Get variable by name \e $2 given a list of variables \e $1.
##  A semicolon is used as a list separator.
##
##   \param $1 input string
##   \param $2 required var
##   \return 0 if the variable was found, 1 otherwise.
##
makl_tab_var ()
{
    i=1
    found=0

    while true; do
        elem=`echo $1 | cut -f ${i} -d ";"`
        delim=`echo $1 | cut -s -f ${i} -d ";"`
        [ -z ${elem} ] && break
        var=`echo ${elem} | cut -f 1 -d "="`
        val=`echo ${elem} | cut -f 2 -d "="`
        if [ ${var} = $2 ] || [ -z ${delim} ]; then
            found=1
            echo ${val}
            break
        fi
        # stop if we have no separator
        i=$((${i}+1))
    done

    if [ ${found} = 0 ]; then
        return 1
    else
        return 0
    fi
}
