#
# $Id: makl.init,v 1.44 2009/03/27 12:10:41 tat Exp $
#

# read in just once
if [ -z "${_makl_inited}" ]; then

_makl_inited="YES"

# "MAKL_DIR" is read from the shell env (it's MaKL bootstrap value)
if [ -z "${MAKL_DIR}" ]; then
    echo "MAKL_DIR value must be set in the shell environment"
    exit 1
fi

# if --help as been used and configure.help exists print it immediately and 
# exit (this avoids sourcing the whole MaKL lib just to display the help)
for arg in "$@"; do
    case ${arg} in 
        -h | --help)
            if [ -r configure.help ]; then
                cat configure.help
                exit 0 ;
            fi
            ;;
    esac
done

# when playing with makl nutshells, MAKL_ETC (i.e. where toolchain belongs)
# can be arbitrarily set by the user
MAKL_ETC="${MAKL_ETC:-${MAKL_DIR}/etc}"

# set globals to sensible defaults if not already set
makl_makefile_conf="${makl_makefile_conf:-`pwd`/Makefile.conf}"
makl_conf_h="${makl_conf_h:-`pwd`/conf.h}"
makl_run_dir="${makl_run_dir:-`pwd`/.makl.run}"

# create a fresh makl run dir
if [ -d "${makl_run_dir}" ]; then
    rm -rf "${makl_run_dir}" || exit 1
fi
mkdir -p "${makl_run_dir}" || exit 1

# save environment 
# assumes that variables cannot contain \nVAR=VAL as part of their value
env > "${makl_run_dir}"/env.orig
env | grep -v "^MAKEOVERRIDES=" | grep -v '^$' \
    | sed -e '/^[A-Za-z_].*=/s/=/="/' -e '/\\$/!s/$/"/' \
  > "${makl_run_dir}"/env

if [ ! -r "${MAKL_ETC}"/toolchain.cf ]; then
    echo "missing toolchain.cf !"
    exit 1
fi

# import toolchain variables locally
. "${MAKL_ETC}"/toolchain.cf

#
# from now on we can safely use command aliases defined in toolchain.cf
#

# environment has priority over toolchain
. "${makl_run_dir}"/env 2> /dev/null

# source makl functions and configuration
for shenv in "${MAKL_DIR}"/cf/makl_*.sh \
        "${MAKL_DIR}"/cf/helpers/makl_*.sh \
        "${MAKL_DIR}"/etc/vars.cf \
        "${MAKL_DIR}"/etc/args.cf \
        "${MAKL_DIR}"/etc/funcs.cf; do
    [ -f "${shenv}" ] && . "${shenv}" 2> /dev/null
done

# show global variables' values
makl_dbg_globals

# pass the control to the user.
fi
