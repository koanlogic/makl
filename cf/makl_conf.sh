#
# $Id: makl_conf.sh,v 1.7 2010/05/26 20:23:23 tho Exp $
#

#/*!
#   @header Configuration   Top Level Auto-configuration interface.
#*/

#/*!
#   @function   makl_process_conf
#   @abstract   Process configuration output from cache.
#   @discussion Process configuration output (i.e. <tt>${makl_conf_h}</tt>) 
#               and <tt>${makl_makefile_conf}</tt>) from internal cache.
#*/
makl_process_conf ()
{
    [ -z `makl_get "__noconfig__"` ] || return
    makl_info "processing configuration output from cache"

    f_mk="${makl_run_dir}"/vars_mk
    f_h="${makl_run_dir}"/vars_h

    # initialise 
    makl_init_makefile_conf
    makl_init_conf_h

    # write vars_mk 
    "${CAT}" "${f_mk}" | {
        while read line; do
            makl_process_mk "${line}"
        done
    }

    # terminate Makefile.conf with relocation include
    makl_term_mk

    # write header variables
    "${CAT}" "${f_h}" | { 
        while read line; do
            makl_process_h "${line}"
        done
    }   

    # terminate 
    makl_term_conf_h
}

#/*!
#   @function   makl_process_mk
#   @abstract   Parse a line and output to mk file.
#   @discussion Parse line <tt>$1</tt> and output to mk file.
#   @param  $1  line to be processed
#*/
makl_process_mk ()
{
    var=`makl_tab_elem "$1" 1`
    set=`makl_tab_elem "$1" 2`
    val=`makl_tab_elem "$1" 3`
    isset=`makl_tab_elem "$1" 4`

    if [ ${set} -eq 1 ]; then
        if [ "${isset}" = "1" ]; then
            "${ECHO}" "${var} = ${val}" >> "${makl_makefile_conf}"
        else 
            "${ECHO}" "${var} += ${val}" >> "${makl_makefile_conf}"
        fi
    fi
}

#/*!
#   @function   makl_process_h
#   @abstract   Parse a line and output to h file.
#   @discussion Parse a line <tt>$1</tt> and output to h file.
#   @param  $1  line to be processed
#*/
makl_process_h ()
{
    var=`makl_tab_elem "$1" 1`
    set=`makl_tab_elem "$1" 2`
    val=`makl_tab_elem "$1" 3`

    {
        if [ ${set} -eq 1 ]; then
            "${ECHO}" "#undef ${var}"
            if [ -z "${val}" ]; then
                "${ECHO}" "#define ${var}"
            else    
                "${ECHO}" "#define ${var} ${val}"
            fi    
        else
            "${ECHO}" "#undef ${var}" 
        fi
        "${ECHO}"

    } >> "${makl_conf_h}"
}

#/*!
#   @function   makl_init_conf_h
#   @abstract   Initialise output header file.
#   @discussion Initialise output header file <tt>${makl_conf_h}</tt>.
#*/
makl_init_conf_h ()
{
    args=`makl_get "__args__"`
    filename=`basename "${makl_conf_h}"`
    file=`makl_upper "${filename}"` 
    file=`"${ECHO}" "${file}" | "${SED}" 's/\./_/g' | "${SED}" 's/-/_/g'` 
    {
        "${ECHO}" "/* Autogenerated by MaKL - `date` */" 
        "${ECHO}" "/* Configure arguments: ${args} */" 
        "${ECHO}"
        "${ECHO}" "#ifndef _${file}_"
        "${ECHO}" "#define _${file}_"
        "${ECHO}"

    } > "${makl_conf_h}"
}

#/*!
#   @function   makl_init_makefile_conf
#   @abstract   Initialise output makefile configuration.
#   @discussion Initialise output makefile configuration 
#               <tt>${makl_makefile_conf}</tt>.
#*/
makl_init_makefile_conf ()
{
    args=`makl_get "__args__"`
    {
        "${ECHO}" "# Autogenerated by MaKL - `date`" 
        "${ECHO}" "# Configure arguments: ${args}" 
        "${ECHO}" 

    } > "${makl_makefile_conf}"
}

#/*!
#   @function   makl_term_conf_h
#   @abstract   Terminate output header file.
#   @discussion Terminate output header file <tt>${makl_conf_h}</tt>.
#*/
makl_term_conf_h ()
{
    filename=`basename "${makl_conf_h}"`
    file=`makl_upper "${filename}"` 
    file=`"${ECHO}" "${file}" | "${SED}" 's/\./_/g' | "${SED}" 's/-/_/g'` 

    "${ECHO}" "#endif /* !_${file}_ */" >> "${makl_conf_h}"
}

#/*!
#   @function   makl_term_mk
#   @abstract   Terminate output makefile configuration.
#   @discussion Terminate output makefile configuration 
#               <tt>${makl_makefile_conf}</tt>.
#*/
makl_term_mk ()
{
    "${ECHO}" >> "${makl_makefile_conf}"
    "${ECHO}" "include reloc.mk" >> "${makl_makefile_conf}"
}
