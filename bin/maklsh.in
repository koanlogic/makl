#!/bin/sh
#
# $Id: maklsh.in,v 1.13 2007/12/13 13:26:03 tho Exp $

export MAKL_DIR="@{{MAKL_ROOT}}"
export MAKEFLAGS="-I ${MAKL_DIR}/mk"

MAKL_VERSION=`cat ${MAKL_DIR}/VERSION 2>/dev/null`
PATH_CF_SCRIPT=""       # must be set by search_cf_script()
PATH_GNUMAKE=@{{GNU_MAKE}}

# these are the defaults: users can expand it through MAKL_CF_SCRIPTS variable
# (read from their ${HOME}/.maklrc)
CF_SCRIPTS="./configure.sh  \
            ./Config.sh     \
            ./config.sh     \
            ./Configure.sh  \
            ./configure     \
            ./Configure"

search_cf_script ()
{
    for cf in ${CF_SCRIPTS}
    do
        if [ -x ${cf} ]; then
            PATH_CF_SCRIPT=${cf} 
            return 0
        fi
    done

    echo "no suitable configure script found" 
    return 1
}

search_nearest_maklrc ()
{
    cdir="."
    depth=5 # default search depth value: can be overridden by MAKL_RC_MAXDEPTH

    [ "${MAKL_RC_MAXDEPTH}" ] && depth=${MAKL_RC_MAXDEPTH}

    while expr ${depth} '>' 0 >/dev/null
    do
        depth=`expr ${depth} - 1`
        [ -r ${cdir}"/.maklrc" ] && return 0
        cdir="../"${cdir}
    done

    return 1
}

display_help ()
{
    echo "MaKL version ${MAKL_VERSION}, (c) 2005-2007 Koanlogic srl         "
    echo "This is free software released under the BSD license.             "
    echo "                                                                  "
    echo "Available tools are:                                              "
    echo "makl      => GNU make wrapper                                     "
    echo "maklconf  => configure script wrapper                             "
    echo "makltc    => toolchain installer                                  "
    echo "maklhelp  => display this help                                    "
    echo "                                                                  "
    echo "MaKL variable in use:                                             "
    echo "MAKL_DIR  [${MAKL_DIR}]"
    echo "MAKEFLAGS [${MAKEFLAGS}]"
    echo "MAKL_ETC  [${MAKL_ETC}]"

    return
}

toolchain_env ()
{
    # accumulate the needed variables into ENV
    [ "${MAKL_TC}" ] && ENV="MAKL_TC=${MAKL_TC}"
    [ "${MAKL_TC_FILE}" ] && ENV="${ENV} MAKL_TC_FILE=${MAKL_TC_FILE}"
    [ "${MAKL_SHLIB}" ] && ENV="${ENV} MAKL_SHLIB=${MAKL_SHLIB}"
    [ "${MAKL_SHLIB_FILE}" ] && ENV="${ENV} MAKL_SHLIB_FILE=${MAKL_SHLIB_FILE}"
    [ "${MAKL_ETC}" ] && ENV="${ENV} MAKL_ETC=${MAKL_ETC}"

    # check if there's anything into ENV
    if [ -z "${ENV}" ]
    then
        echo "at least one of MAKL_TC, MAKL_SHLIB, MAKL_ETC must be set !"
        return 1
    fi

    return 0
}

# get overrides from the user 
[ -f ${HOME}/.maklrc ] && . ${HOME}/.maklrc

# further overrides are taken from per-project .maklrc's
search_nearest_maklrc
[ $? == 0 ] && . `(cd ${cdir} && pwd)`/.maklrc

# merge configure scripts naming from user (user settings have precedence)
CF_SCRIPTS="${MAKL_CF_SCRIPTS} ${CF_SCRIPTS}"

# dispatch action based on how we were called
case `basename $0`
in
    makl)
        # exec GNU make with user supplied arguments
        ${PATH_GNUMAKE} $@
        exit $?
        ;;
    maklconf)
        search_cf_script || exit 1
        # exec the selected configure script with user supplied arguments
        ${PATH_CF_SCRIPT} $@ 
        exit $?
        ;;
    maklhelp)
        display_help
        exit 0
        ;;
    makltc)
        toolchain_env || exit 1
        env ${ENV} ${MAKL_DIR}/setup/tc_setup.sh
        exit $?
        ;;
    *)
        echo "don't call me directly, instead call me as makl or maklconf"
        exit 1
        ;;
esac

# should never reach here
exit 1
