#!@{{BOURNE_SHELL}}
#
# $Id: maklsh.in,v 1.36 2008/11/07 20:18:29 tho Exp $

MAKLSH_LIB="@{{MAKL_ROOT}}/maklsh"

# source-in utility code
. "${MAKLSH_LIB}/maklsh_funcs"
. "${MAKLSH_LIB}/maklsh_catalog"

MAKLSH_NOMAKL_ARGS=""

##
# main
##

# initialize runtime context
maklsh_context_init

# get overrides from the user 
maklsh_load_user_settings

# further overrides are taken from per-project maklrc's
maklsh_load_per_proj_settings

# process command line args
maklsh_argsep "$@"

# ==> from now on we could use maklsh_chat()

# take in other overrides from explicit --makl-rc=file
[ ! -z "${MAKLSH_MAKL_RC}" ] && maklsh_load_from_file "${MAKLSH_MAKL_RC}"

# dump settings if --makl-verbose
[ ! -z "${MAKLSH_VERBOSE}" ] && maklsh_context_dump

# before dispatching push the accumulated context in the env
maklsh_context_push

rc=0

## 
# dispatch action based on how we have been called
## 
case `basename "$0"`
in
    ${MAKL_CMD_RUN})
        . "${MAKLSH_LIB}/maklsh_tc"
        . "${MAKLSH_LIB}/maklsh_run"
        [ ! -z "${MAKLSH_TC_ONTHEFLY}" ] && maklsh_tc
        maklsh_run
        rc=$?
        [ ! -z "${MAKLSH_TC_ONTHEFLY}" ] && maklsh_tc_clean
        ;;
    ${MAKL_CMD_CONF} | ${MAKL_CMD_CONF_COMPAT})
        . "${MAKLSH_LIB}/maklsh_tc"
        . "${MAKLSH_LIB}/maklsh_conf"
        maklsh_select_configure
        [ ! -z "${MAKLSH_TC_ONTHEFLY}" ] && maklsh_tc
        "@{{BOURNE_SHELL}}" "${MAKLSH_CF_SCRIPT_PATH}" "$@"
        rc=$?
        [ ! -z "${MAKLSH_TC_ONTHEFLY}" ] && maklsh_tc_clean
        ;;
    ${MAKL_CMD_NEW} | ${MAKL_CMD_NEW_COMPAT})
        . "${MAKLSH_LIB}/maklsh_new"
        maklsh_new
        ;;
    ${MAKL_CMD_HELP} | ${MAKL_CMD_HELP_COMPAT})
        . "${MAKLSH_LIB}/maklsh_help"
        maklsh_help
        ;;
    ${MAKL_CMD_TC} | ${MAKL_CMD_TC_COMPAT})
        . "${MAKLSH_LIB}/maklsh_tc"
        maklsh_tc
        ;;
    *)
        maklsh_err "you should call me through one of my aliases !"
        ;;
esac

exit ${rc}
